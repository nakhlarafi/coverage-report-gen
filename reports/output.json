{
    "Branch Coverage": {
        "<math.Sort: void <init>()>": {
            "coverage": "0.00%",
            "total": "0",
            "executed": "0"
        },
        "<math.Sort: int[] addInRadixSort(int,int[])>": {
            "coverage": "50.00%",
            "total": "2",
            "executed": "1"
        },
        "<math.Sort: void createHeap(int[])>": {
            "coverage": "100.00%",
            "total": "2",
            "executed": "2"
        },
        "<math.Sort: int getMaxNumberOfDigits(int[])>": {
            "coverage": "100.00%",
            "total": "4",
            "executed": "4"
        },
        "<math.Sort: void MergeSort(int[])>": {
            "coverage": "0.00%",
            "total": "0",
            "executed": "0"
        },
        "<math.Sort: void swapInHeapSort(int,int,int[])>": {
            "coverage": "0.00%",
            "total": "0",
            "executed": "0"
        },
        "<math.Sort: int getDigit(int,int)>": {
            "coverage": "0.00%",
            "total": "0",
            "executed": "0"
        },
        "<math.Sort: void swapInQuickSort(int[],int,int)>": {
            "coverage": "0.00%",
            "total": "0",
            "executed": "0"
        },
        "<math.Sort: void sortHeap(int[])>": {
            "coverage": "78.57%",
            "total": "14",
            "executed": "11"
        },
        "<math.Sort: void Quicksort(int[],int,int)>": {
            "coverage": "12.50%",
            "total": "8",
            "executed": "1"
        },
        "<math.Sort: void QuickSort(int[])>": {
            "coverage": "0.00%",
            "total": "0",
            "executed": "0"
        },
        "<math.Sort: int addInHeapSort(int,int,int[])>": {
            "coverage": "100.00%",
            "total": "2",
            "executed": "2"
        },
        "<math.Sort: void MergeSort(int,int,int[])>": {
            "coverage": "100.00%",
            "total": "6",
            "executed": "6"
        },
        "<math.Sort: void HeapSort(int[])>": {
            "coverage": "0.00%",
            "total": "0",
            "executed": "0"
        },
        "<math.Sort: void RadixSort(int[])>": {
            "coverage": "100.00%",
            "total": "10",
            "executed": "10"
        },
        "<math.Sort: int median3(int[],int,int)>": {
            "coverage": "0.00%",
            "total": "6",
            "executed": "0"
        },
        "<math.Sort: void insertionSort(int[],int,int)>": {
            "coverage": "100.00%",
            "total": "6",
            "executed": "6"
        },
        "<math.Sort: void mergeWithExtraStorage(int,int,int,int,int[])>": {
            "coverage": "100.00%",
            "total": "22",
            "executed": "22"
        }
    },
    "Statement Coverage": {
        "<math.Sort: void <init>()>": {
            "coverage": "100.00%",
            "total": "3",
            "executed": "3"
        },
        "<math.Sort: int[] addInRadixSort(int,int[])>": {
            "coverage": "66.67%",
            "total": "12",
            "executed": "8"
        },
        "<math.Sort: void createHeap(int[])>": {
            "coverage": "100.00%",
            "total": "9",
            "executed": "9"
        },
        "<math.Sort: int getMaxNumberOfDigits(int[])>": {
            "coverage": "100.00%",
            "total": "14",
            "executed": "14"
        },
        "<math.Sort: void MergeSort(int[])>": {
            "coverage": "100.00%",
            "total": "3",
            "executed": "3"
        },
        "<math.Sort: void swapInHeapSort(int,int,int[])>": {
            "coverage": "100.00%",
            "total": "5",
            "executed": "5"
        },
        "<math.Sort: int getDigit(int,int)>": {
            "coverage": "100.00%",
            "total": "3",
            "executed": "3"
        },
        "<math.Sort: void swapInQuickSort(int[],int,int)>": {
            "coverage": "100.00%",
            "total": "5",
            "executed": "5"
        },
        "<math.Sort: void sortHeap(int[])>": {
            "coverage": "82.86%",
            "total": "35",
            "executed": "29"
        },
        "<math.Sort: void Quicksort(int[],int,int)>": {
            "coverage": "16.00%",
            "total": "25",
            "executed": "4"
        },
        "<math.Sort: void QuickSort(int[])>": {
            "coverage": "100.00%",
            "total": "4",
            "executed": "4"
        },
        "<math.Sort: int addInHeapSort(int,int,int[])>": {
            "coverage": "100.00%",
            "total": "16",
            "executed": "16"
        },
        "<math.Sort: void MergeSort(int,int,int[])>": {
            "coverage": "100.00%",
            "total": "22",
            "executed": "22"
        },
        "<math.Sort: void HeapSort(int[])>": {
            "coverage": "100.00%",
            "total": "3",
            "executed": "3"
        },
        "<math.Sort: void RadixSort(int[])>": {
            "coverage": "100.00%",
            "total": "42",
            "executed": "42"
        },
        "<math.Sort: int median3(int[],int,int)>": {
            "coverage": "0.00%",
            "total": "19",
            "executed": "0"
        },
        "<math.Sort: void insertionSort(int[],int,int)>": {
            "coverage": "100.00%",
            "total": "17",
            "executed": "17"
        },
        "<math.Sort: void mergeWithExtraStorage(int,int,int,int,int[])>": {
            "coverage": "100.00%",
            "total": "57",
            "executed": "57"
        }
    }
}